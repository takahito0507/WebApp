"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deprecate = deprecate;
exports.deprecateSimple = deprecateSimple;

var _extend = _interopRequireDefault(require("./extend"));

var _hooks = require("./hooks");

var _isUndefined = _interopRequireDefault(require("./is-undefined"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function warn(msg) {
  if (_hooks.hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
    console.warn('Deprecation warning: ' + msg);
  }
}

function deprecate(msg, fn) {
  var firstTime = true;
  return (0, _extend["default"])(function () {
    if (_hooks.hooks.deprecationHandler != null) {
      _hooks.hooks.deprecationHandler(null, msg);
    }

    if (firstTime) {
      var args = [];
      var arg;

      for (var i = 0; i < arguments.length; i++) {
        arg = '';

        if (_typeof(arguments[i]) === 'object') {
          arg += '\n[' + i + '] ';

          for (var key in arguments[0]) {
            arg += key + ': ' + arguments[0][key] + ', ';
          }

          arg = arg.slice(0, -2); // Remove trailing comma and space
        } else {
          arg = arguments[i];
        }

        args.push(arg);
      }

      warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
      firstTime = false;
    }

    return fn.apply(this, arguments);
  }, fn);
}

var deprecations = {};

function deprecateSimple(name, msg) {
  if (_hooks.hooks.deprecationHandler != null) {
    _hooks.hooks.deprecationHandler(name, msg);
  }

  if (!deprecations[name]) {
    warn(msg);
    deprecations[name] = true;
  }
}

_hooks.hooks.suppressDeprecationWarnings = false;
_hooks.hooks.deprecationHandler = null;