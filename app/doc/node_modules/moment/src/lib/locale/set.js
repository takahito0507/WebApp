"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.set = set;
exports.mergeConfigs = mergeConfigs;

var _isFunction = _interopRequireDefault(require("../utils/is-function"));

var _extend = _interopRequireDefault(require("../utils/extend"));

var _isObject = _interopRequireDefault(require("../utils/is-object"));

var _hasOwnProp = _interopRequireDefault(require("../utils/has-own-prop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function set(config) {
  var prop, i;

  for (i in config) {
    prop = config[i];

    if ((0, _isFunction["default"])(prop)) {
      this[i] = prop;
    } else {
      this['_' + i] = prop;
    }
  }

  this._config = config; // Lenient ordinal parsing accepts just a number in addition to
  // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
  // TODO: Remove "ordinalParse" fallback in next major release.

  this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
}

function mergeConfigs(parentConfig, childConfig) {
  var res = (0, _extend["default"])({}, parentConfig),
      prop;

  for (prop in childConfig) {
    if ((0, _hasOwnProp["default"])(childConfig, prop)) {
      if ((0, _isObject["default"])(parentConfig[prop]) && (0, _isObject["default"])(childConfig[prop])) {
        res[prop] = {};
        (0, _extend["default"])(res[prop], parentConfig[prop]);
        (0, _extend["default"])(res[prop], childConfig[prop]);
      } else if (childConfig[prop] != null) {
        res[prop] = childConfig[prop];
      } else {
        delete res[prop];
      }
    }
  }

  for (prop in parentConfig) {
    if ((0, _hasOwnProp["default"])(parentConfig, prop) && !(0, _hasOwnProp["default"])(childConfig, prop) && (0, _isObject["default"])(parentConfig[prop])) {
      // make sure changes to properties don't modify parent config
      res[prop] = (0, _extend["default"])({}, res[prop]);
    }
  }

  return res;
}